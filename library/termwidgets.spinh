{
----------------------------------------------------------------------------------------------------
    Filename:       termwidgets.spinh
    Description:    Text widgets usable in a terminal device
    Author:         Jesse Burt
    Started:        Dec 14, 2019
    Updated:        Mar 17, 2024
    Copyright (c) 2024 - See end of file for terms of use.
----------------------------------------------------------------------------------------------------

'   Must be included using the preprocessor #include directive
'   Requires:
'       An object that has the following standard terminal methods:
'           putchar(param)
'           puts(param)
'           puthexs(param, digits)
}

PUB hexdump(pbuff, baddr, adigs, nr_b, cols, gsz=1) | hxo, asc_offs, asc_addr, col
' Display a hexdump of a region of memory
'   pbuff:  pointer to location in memory to hexdump
'   baddr:  address used to display as base address in hex dump
'               (affects display only - useful for dumps of an EE, flash chip, etc)
'   adigs:  number of digits used to display address
'   nr_b:   total number of bytes to display
'   cols:   number of bytes to display on each line
'   gsz:    group this many bytes together before drawing a space
'   NOTE: if cols isn't evenly divisible by gsz, an incomplete group may be drawn
    col := 0
    hxo := asc_offs := 0                        ' initialize offsets to base
                                                '   address
    repeat while (hxo < nr_b)
        puthexs(baddr+hxo, adigs)               ' show memory offset of line
        puts(string(": "))

        { display data in hex }
        repeat while (col < cols)
            puthexs(byte[pbuff+hxo], 2)
            col++
            hxo++
            ifnot ( col // gsz )                ' end of a group of bytes? draw a space
                putchar(" ")

        putchar("|")                            ' separate hex from ASCII
        col := 0

        { display data in ASCII }
        repeat while (col < cols)
            asc_addr := pbuff+asc_offs
            if (lookdown(byte[asc_addr]: 32..126))
                putchar(byte[asc_addr])         ' display printable chars as-is
            else
                putchar(".")                    ' and unprintable chars as "."
            col++
            asc_offs++

        putchar("|")
        col := 0                                ' ready for next line
        newline{}


PUB hexdump_noascii(pbuff, baddr, adigs, nr_b, cols, gsz=1) | hxo, col
' Display a hexdump of a region of memory (hex display only)
'   pbuff:  pointer to location in memory to hexdump
'   baddr:  address used to display as base address in hex dump
'               (affects display only - useful for dumps of an EE, flash chip, etc)
'   adigs:  number of digits used to display address
'   nr_b:   total number of bytes to display
'   cols:   number of bytes to display on each line
'   gsz:    group this many bytes together before drawing a space
'   NOTE: if cols isn't evenly divisible by gsz, an incomplete group may be drawn
    col := 0
    hxo := 0                                    ' initialize offsets to base address

    repeat while (hxo < nr_b)
        puthexs(baddr+hxo, adigs)               ' show memory offset of line
        puts(string(": "))

        { display data in hex }
        repeat while (col < cols)
            puthexs(byte[pbuff+hxo], 2)
            hxo++
            col++
            ifnot ( col // gsz )                ' end of a group of bytes? draw a space
                putchar(" ")
        col := 0                                ' ready for next line
        newline{}


DAT
{
Copyright 2024 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

